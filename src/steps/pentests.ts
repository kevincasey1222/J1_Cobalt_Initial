import {
  createDirectRelationship,
  createIntegrationEntity,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
  IntegrationMissingKeyError,
} from '@jupiterone/integration-sdk-core';

import { createAPIClient } from '../client';
import { IntegrationConfig } from '../types';
import { VENDOR_ENTITY_KEY, SERVICE_ENTITY_KEY } from './account';

export async function fetchPentests({
  instance,
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  const apiClient = createAPIClient(instance.config);

  const vendorEntity = await jobState.findEntity(VENDOR_ENTITY_KEY);
  if (!vendorEntity) {
    throw new IntegrationMissingKeyError(
      `Expected Vendor with key to exist (key=${VENDOR_ENTITY_KEY})`,
    );
  }

  const serviceEntity = await jobState.findEntity(SERVICE_ENTITY_KEY);
  if (!serviceEntity) {
    throw new IntegrationMissingKeyError(
      `Expected Service with key to exist (key=${SERVICE_ENTITY_KEY})`,
    );
  }

  await apiClient.iteratePentests(async (pentest) => {
    const pentestProps = pentest.resource;
    const assessmentEntity = await jobState.addEntity(
      createIntegrationEntity({
        entityData: {
          source: pentest,
          assign: {
            _type: 'cobalt_pentest',
            _class: 'Assessment',
            _key: pentestProps.id,
            name: pentestProps.title,
            displayName: pentestProps.title,
            category: 'Penetration Testing',
            summary: pentestProps.title, //required prop for Assessment
            internal: false,
            objectives: pentestProps.objectives,
            state: pentestProps.state,
            tag: pentestProps.tag,
            assetId: pentestProps.asset_id, //apparently optional and not reliable in API v1.3
            platformTags: JSON.stringify(pentestProps.platform_tags, null, 2),
            methodology: pentestProps.methodology,
            targets: JSON.stringify(pentestProps.targets, null, 2),
            startDate: pentestProps.start_date,
            endDate: pentestProps.end_date,
          },
        },
      }),
    );

    await jobState.addRelationship(
      createDirectRelationship({
        _class: RelationshipClass.PERFORMED,
        from: vendorEntity,
        to: assessmentEntity,
      }),
    );

    await jobState.addRelationship(
      createDirectRelationship({
        _class: RelationshipClass.PERFORMED,
        from: serviceEntity,
        to: assessmentEntity,
      }),
    );
  });
}

export const pentestSteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: 'fetch-pentests',
    name: 'Fetch Pentests',
    entities: [
      {
        resourceName: 'Cobalt Pentest',
        _type: 'cobalt_pentest',
        _class: 'Assessment',
        partial: true,
      },
    ],
    relationships: [
      {
        _type: 'cobalt_vendor_performed_pentest',
        _class: RelationshipClass.PERFORMED,
        sourceType: 'cobalt_vendor',
        targetType: 'cobalt_pentest',
      },
      {
        _type: 'cobalt_service_performed_pentest',
        _class: RelationshipClass.PERFORMED,
        sourceType: 'cobalt_service',
        targetType: 'cobalt_pentest',
      },
    ],
    dependsOn: ['fetch-assets'],
    executionHandler: fetchPentests,
  },
];
